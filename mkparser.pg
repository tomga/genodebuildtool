


CmdList: Command | CmdList LINE_END Command;

Command: VAR_NAME WSOPT CmdOper WSOPT RValueExpr |
				 CondCmd |
				 WSOPT |
				 COMMENT;

CmdOper: CMD_APPEND |
         CMD_RECURSIVE_EXPAND_ASSIGN |
				 CMD_SIMPLE_EXPAND_ASSIGN |
				 CMD_OPTASSIGN;

CondCmd: Condition LINE_END CmdList LINE_END "endif" |
         Condition LINE_END CmdList LINE_END "else" LINE_END CmdList LINE_END "endif" |
         Condition LINE_END CmdList LINE_END "else" WS CondCmd;

Condition: IfdefOper WS VAR_NAME |
           IfeqOper WS IFEQ_START RValueExpr "," RValueExpr EXPR_OR_IFEQ_END;

IfdefOper: "ifdef" | "ifndef";

IfeqOper: "ifeq" | "ifneq";

WSOPT: WS | EMPTY;

RValueExpr: RValuePart |
            RValueExpr RValuePart |
						EMPTY;

RValuePart: RValueText |
            EXPR_START Fun2Name WS RValueExpr "," RValueExpr EXPR_OR_IFEQ_END |
            EXPR_START VAR_NAME EXPR_OR_IFEQ_END;

RValueText: TEXT |
            ESCAPED |
						LINE_CONTINUATION |
						WS;

Fun2Name: "filter-out";

terminals
LINE_END: /\n/;
TEXT: /[^#$\\\n ()]/;
ESCAPED: /\\./;
LINE_CONTINUATION: /\\\n/;
WS: /[ \t]+/;
COMMENT: /#.*/;
VAR_NAME: /[A-Za-z][A-Za-z0-9_]*/;
EXPR_START: /\$\(/;
IFEQ_START: /\(/;
EXPR_OR_IFEQ_END: /\)/;
CMD_APPEND: "+=";
CMD_RECURSIVE_EXPAND_ASSIGN: "=";
CMD_SIMPLE_EXPAND_ASSIGN: ":=";
CMD_OPTASSIGN: "?=";
